{
  "address": "0x44464d89Fd5b6dACd58BB7634c7AB8cAd7d45324",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1MessageRelayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "payLoad",
          "type": "bytes"
        }
      ],
      "name": "executeMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1MessageRelayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1MessageRelayer",
          "type": "address"
        }
      ],
      "name": "updateL2MessageRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x918629484207d0b4ee2bc3d2174ca74bffe3ba8e57961fa5c2887a0f9f4499fa",
  "receipt": {
    "to": null,
    "from": "0x570f581D23a2AB09FD1990279D9DB6f5DcE18F4A",
    "contractAddress": "0x44464d89Fd5b6dACd58BB7634c7AB8cAd7d45324",
    "transactionIndex": 1,
    "gasUsed": "1081868",
    "logsBloom": "0x
    "blockHash": "0x7c486aea4ddf99ff3a7e2f8283001f75a0f876f99dde0d42bf7ba7bcafd69dce",
    "transactionHash": "0x918629484207d0b4ee2bc3d2174ca74bffe3ba8e57961fa5c2887a0f9f4499fa",
    "logs": [],
    "blockNumber": 1030238,
    "cumulativeGasUsed": "1081868",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC77Ba9Ec1344a69C6b2CDF169F63E247dB237a68"
  ],
  "numDeployments": 1,
  "solcInputHash": "33f1f6b8a12d7e08d655091c8594b37b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1MessageRelayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payLoad\",\"type\":\"bytes\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1MessageRelayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1MessageRelayer\",\"type\":\"address\"}],\"name\":\"updateL2MessageRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(bytes)\":{\"params\":{\"payLoad\":\"message received from L1 that needs to be executed.*\"}},\"updateL2MessageRelayer(address)\":{\"details\":\"Update the address of the L1MessageRelayer contract.\",\"params\":{\"_l1MessageRelayer\":\"the address of L1 contract used to relay messsages to L2.*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(bytes)\":{\"notice\":\"executes message received from L1.\"},\"l1MessageRelayer()\":{\"notice\":\"Address of the L1MessageRelayer contract on mainnet.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/arbitrum/L2MessageExecutor.sol\":\"L2MessageExecutor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/arbitrum/AddressAliasHelper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2019-2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.7.5;\\n\\nlibrary AddressAliasHelper {\\n  uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);\\n\\n  /// @notice Utility function that converts the address in the L1 that submitted a tx to\\n  /// the inbox to the msg.sender viewed in the L2\\n  /// @param l1Address the address in the L1 that triggered the tx to L2\\n  /// @return l2Address L2 address as viewed in msg.sender\\n  function applyL1ToL2Alias(address l1Address)\\n    internal\\n    pure\\n    returns (address l2Address)\\n  {\\n    l2Address = address(uint160(l1Address) + offset);\\n  }\\n\\n  /// @notice Utility function that converts the msg.sender viewed in the L2 to the\\n  /// address in the L1 that submitted a tx to the inbox\\n  /// @param l2Address L2 address as viewed in msg.sender\\n  /// @return l1Address the address in the L1 that triggered the tx to L2\\n  function undoL1ToL2Alias(address l2Address)\\n    internal\\n    pure\\n    returns (address l1Address)\\n  {\\n    l1Address = address(uint160(l2Address) - offset);\\n  }\\n}\\n\",\"keccak256\":\"0x54c8a78b6dfaecac466de58f6df5833b01fa0e23b718ed6e670a2f0bcf4b4e5b\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/L2MessageExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.5;\\n\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport {AddressAliasHelper} from \\\"./AddressAliasHelper.sol\\\";\\n\\ncontract L2MessageExecutor is ReentrancyGuard {\\n  /// @notice Address of the L1MessageRelayer contract on mainnet.\\n  address public l1MessageRelayer;\\n\\n  constructor(address _l1MessageRelayer) {\\n    l1MessageRelayer = _l1MessageRelayer;\\n  }\\n\\n  /**\\n   * @notice Throws if called by any account other than this contract.\\n   **/\\n  modifier onlyThis() {\\n    require(\\n      msg.sender == address(this),\\n      \\\"L2MessageExecutor: Unauthorized message sender\\\"\\n    );\\n    _;\\n  }\\n\\n  /**\\n   * @dev Update the address of the L1MessageRelayer contract.\\n   * @param _l1MessageRelayer the address of L1 contract used to relay messsages to L2.\\n   **/\\n  function updateL2MessageRelayer(address _l1MessageRelayer) external onlyThis {\\n    require(\\n      _l1MessageRelayer != address(0),\\n      \\\"L2MessageExecutor::updateL2MessageRelayer: _l1MessageRelayer is the zero address\\\"\\n    );\\n    l1MessageRelayer = _l1MessageRelayer;\\n  }\\n\\n  /**\\n   * @notice executes message received from L1.\\n   * @param payLoad message received from L1 that needs to be executed.\\n   **/\\n  function executeMessage(bytes calldata payLoad) external nonReentrant {\\n    // To check that message came from L1, we check that the sender is the L1 contract's L2 alias.\\n    require(\\n      msg.sender == AddressAliasHelper.applyL1ToL2Alias(l1MessageRelayer),\\n      \\\"L2MessageExecutor::executeMessage: Unauthorized message sender\\\"\\n    );\\n\\n    (address target, bytes memory callData) = abi.decode(\\n      payLoad,\\n      (address, bytes)\\n    );\\n    (bool success, ) = target.call(callData);\\n    require(\\n      success,\\n      \\\"L2MessageExecutor::executeMessage: Message execution reverted.\\\"\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0x4c92a9682075a8ed29d8f20a616e547b3b62ec60b1ea7f4640de380afcfdcbd6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516105cf3803806105cf8339818101604052602081101561003357600080fd5b50516001600081905580546001600160a01b039092166001600160a01b03199092169190911790556105658061006a6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633d1f867914610046578063cc5d781e1461006a578063e0299bf514610092575b600080fd5b61004e610102565b604080516001600160a01b039092168252519081900360200190f35b6100906004803603602081101561008057600080fd5b50356001600160a01b0316610111565b005b610090600480360360208110156100a857600080fd5b8101906020810181356401000000008111156100c357600080fd5b8201836020820111156100d557600080fd5b803590602001918460018302840111640100000000831117156100f757600080fd5b5090925090506101b6565b6001546001600160a01b031681565b33301461014f5760405162461bcd60e51b815260040180806020018281038252602e815260200180610502602e913960400191505060405180910390fd5b6001600160a01b0381166101945760405162461bcd60e51b81526004018080602001828103825260508152602001806104746050913960600191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002600054141561020e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055600154610228906001600160a01b031661041c565b6001600160a01b0316336001600160a01b0316146102775760405162461bcd60e51b815260040180806020018281038252603e815260200180610436603e913960400191505060405180910390fd5b600060608383604081101561028b57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156102b657600080fd5b8201836020820111156102c857600080fd5b803590602001918460018302840111640100000000831117156102ea57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040518551999b50949950976001600160a01b038b1697508996509394508493602087019350915081905083835b602083106103695780518252601f19909201916020918201910161034a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146103cb576040519150601f19603f3d011682016040523d82523d6000602084013e6103d0565b606091505b50509050806104105760405162461bcd60e51b815260040180806020018281038252603e8152602001806104c4603e913960400191505060405180910390fd5b50506001600055505050565b731111000000000000000000000000000000001111019056fe4c324d6573736167654578656375746f723a3a657865637574654d6573736167653a20556e617574686f72697a6564206d6573736167652073656e6465724c324d6573736167654578656375746f723a3a7570646174654c324d65737361676552656c617965723a205f6c314d65737361676552656c6179657220697320746865207a65726f20616464726573734c324d6573736167654578656375746f723a3a657865637574654d6573736167653a204d65737361676520657865637574696f6e2072657665727465642e4c324d6573736167654578656375746f723a20556e617574686f72697a6564206d6573736167652073656e646572a26469706673582212204e63fdff3ea11786bafddb3d20ebfe4bcd0d4b9dca8cfa5873dbffef6c414b7964736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80633d1f867914610046578063cc5d781e1461006a578063e0299bf514610092575b600080fd5b61004e610102565b604080516001600160a01b039092168252519081900360200190f35b6100906004803603602081101561008057600080fd5b50356001600160a01b0316610111565b005b610090600480360360208110156100a857600080fd5b8101906020810181356401000000008111156100c357600080fd5b8201836020820111156100d557600080fd5b803590602001918460018302840111640100000000831117156100f757600080fd5b5090925090506101b6565b6001546001600160a01b031681565b33301461014f5760405162461bcd60e51b815260040180806020018281038252602e815260200180610502602e913960400191505060405180910390fd5b6001600160a01b0381166101945760405162461bcd60e51b81526004018080602001828103825260508152602001806104746050913960600191505060405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002600054141561020e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055600154610228906001600160a01b031661041c565b6001600160a01b0316336001600160a01b0316146102775760405162461bcd60e51b815260040180806020018281038252603e815260200180610436603e913960400191505060405180910390fd5b600060608383604081101561028b57600080fd5b6001600160a01b0382351691908101906040810160208201356401000000008111156102b657600080fd5b8201836020820111156102c857600080fd5b803590602001918460018302840111640100000000831117156102ea57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040518551999b50949950976001600160a01b038b1697508996509394508493602087019350915081905083835b602083106103695780518252601f19909201916020918201910161034a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146103cb576040519150601f19603f3d011682016040523d82523d6000602084013e6103d0565b606091505b50509050806104105760405162461bcd60e51b815260040180806020018281038252603e8152602001806104c4603e913960400191505060405180910390fd5b50506001600055505050565b731111000000000000000000000000000000001111019056fe4c324d6573736167654578656375746f723a3a657865637574654d6573736167653a20556e617574686f72697a6564206d6573736167652073656e6465724c324d6573736167654578656375746f723a3a7570646174654c324d65737361676552656c617965723a205f6c314d65737361676552656c6179657220697320746865207a65726f20616464726573734c324d6573736167654578656375746f723a3a657865637574654d6573736167653a204d65737361676520657865637574696f6e2072657665727465642e4c324d6573736167654578656375746f723a20556e617574686f72697a6564206d6573736167652073656e646572a26469706673582212204e63fdff3ea11786bafddb3d20ebfe4bcd0d4b9dca8cfa5873dbffef6c414b7964736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessage(bytes)": {
        "params": {
          "payLoad": "message received from L1 that needs to be executed.*"
        }
      },
      "updateL2MessageRelayer(address)": {
        "details": "Update the address of the L1MessageRelayer contract.",
        "params": {
          "_l1MessageRelayer": "the address of L1 contract used to relay messsages to L2.*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessage(bytes)": {
        "notice": "executes message received from L1."
      },
      "l1MessageRelayer()": {
        "notice": "Address of the L1MessageRelayer contract on mainnet."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3202,
        "contract": "contracts/arbitrum/L2MessageExecutor.sol:L2MessageExecutor",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9337,
        "contract": "contracts/arbitrum/L2MessageExecutor.sol:L2MessageExecutor",
        "label": "l1MessageRelayer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}